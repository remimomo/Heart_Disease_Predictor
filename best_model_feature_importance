import matplotlib.pyplot as plt
import numpy as np

def plot_feature_importance(model, feature_names):
    """Plot the feature importance for a given model."""
    if hasattr(model, 'feature_importances_'):
        importance = model.feature_importances_
        indices = np.argsort(importance)[::-1]

        # Create a plot
        plt.figure(figsize=(12, 8))
        plt.title("Feature Importance")
        plt.bar(range(len(importance)), importance[indices], align="center")
        plt.xticks(range(len(importance)), [feature_names[i] for i in indices], rotation=90)
        plt.xlabel("Features")
        plt.ylabel("Importance Score")
        plt.tight_layout()
        plt.show()
    else:
        print("The model does not have feature_importances_ attribute.")

if __name__ == "__main__":
    # Load data
    data = load_data('/Users/remimomo/Documents/heart_disease_project/data/heart-disease.csv')
    
    # Preprocess data
    X_train, X_test, y_train, y_test = preprocess_data(data)
    
    # Build models
    models = build_models()
    
    # Evaluate models
    results_df = evaluate_models(models, X_train, y_train)
    
    # Display the results
    print("Model Evaluation Results:")
    print(results_df.sort_values(by='Mean Accuracy', ascending=False))

    # Plot model performance
    plot_model_performance(results_df)
    
    # Selecting the best model based on cross-validation score
    best_model_name = results_df.loc[results_df['Mean Accuracy'].idxmax(), 'Model']
    print(f"\nBest Model: {best_model_name}")

    # Train the best model on the entire training set
    best_model = dict(models)[best_model_name]
    best_model.fit(X_train, y_train)
    
    # Evaluate the best model on the test set
    y_pred = best_model.predict(X_test)
    test_accuracy = accuracy_score(y_test, y_pred)
    print(f'\nTest Set Accuracy of {best_model_name}: {test_accuracy:.2f}')
    print('Classification Report:')
    print(classification_report(y_test, y_pred))
    
    # Save the best model
    save_model(best_model, 'models/model.pkl')
    
    # Feature importance
    feature_names = data.columns[:-1]  # Assuming the last column is the target
    plot_feature_importance(best_model, feature_names)
